module FeatureModel.Parsers.FMGrammar.SkelFMGrammar where

-- Haskell module generated by the BNF converter

import FeatureModel.Parsers.FMGrammar.AbsFMGrammar
import FeatureModel.Parsers.FMGrammar.ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident str  -> failure x


transFMGrammar :: FMGrammar -> Result
transFMGrammar x = case x of
  FMGrammar productions expressions  -> failure x


transProduction :: Production -> Result
transProduction x = case x of
  BaseProduction id childs  -> failure x
  XorProduction id options  -> failure x
  OrProduction id options  -> failure x


transChild :: Child -> Result
transChild x = case x of
  MandatoryChild id  -> failure x
  OptionalChild id  -> failure x


transOption :: Option -> Result
transOption x = case x of
  Option id  -> failure x


transExpression :: Expression -> Result
transExpression x = case x of
  BasicExp id  -> failure x
  ImpliesExp expression0 expression  -> failure x
  IffExp expression0 expression  -> failure x
  AndExp expression0 expression  -> failure x
  OrExp expression0 expression  -> failure x
  NotExp expression  -> failure x



