dofCC <- totalDegreeOfFocus(pplCC)
dofPLUSS <- totalDegreeOfFocus(pplPLUSS)
dosPLUSS <- totalDegreeOfScattering(pplPLUSS)
dosCC <- totalDegreeOfScattering(pplCC)
boxplot(dofPLUSS,dofCC, names = c("PLUSS","MSVCM"))
boxplot(dosPLUSS,dosCC, names = c("PLUSS","MSVCM"))
hist(dosCC)
hist(dosPLUSS)
hist(dosPLUSS, main="Histogram of DoS PLUSS")
hist(dosPLUSS, main="Histogram of DoS PLUSS", xlab="DoS PLUSS")
hist(dosPLUSS, main="Histogram of DoS (PPL)", xlab="DoS PLUSS")
hist(dosCC, main="Histogram of DoS (PPL)", xlab="DoS MSVCM")
dofPLUSS <- totalDegreeOfFocus(pplPLUSS)
dofCC <- totalDegreeOfFocus(pplCC)
boxplot(dofPLUSS,dofCC, names = c("PLUSS","MSVCM"))
histo (dofCC)
hist (dofCC)
hist (dofPLUSS)
boxplot(dosPLUSS,dosCC, names = c("PLUSS","MSVCM"))
title("Boxplot DoS (PPL)")
boxplot(dosPLUSS,dosCC, names = c("PLUSS","MSVCM"))
title("Boxplot DoS (PPL)")
smartPLUSS <- read.table("Documents/workspace/VariabilityManagement/docs/casestudies/smart-home/data/smart-home-pluss-tabular.data",header=T)
smartCC <- read.table("Documents/workspace/VariabilityManagement/docs/casestudies/smart-home/data/smart-home-cc-tabular.data",header=T)
sqr <- function (x) {#
  x*x#
}#
#
sigma2 <- function(v) {#
 sum <- 0#
 for (i in 1:length(v)) {#
  sum <- sum + sqr ( (v[i] - mean(v)) )#
 }#
 sum / (length (v) -1)#
}#
#
sigma <- function (v) {#
 sqrt (sigma2 (v))#
}#
#
pnormal <- function (n,s,y0)#
 (y0-n)/s#
 #
#
featureIndex <- function(inputData, feature) {#
	nFeatures <- length(inputData[[1]])#
	fIndex <- 0#
	for( i in 1:nFeatures ) {#
		if( inputData[i,1] == feature ) fIndex <- i#
	}#
	fIndex#
}#
#
featureDiffusionOverStep <- function(inputData, feature) {#
	fIndex <- featureIndex(inputData, feature)#
    nScenarios <- length(inputData)-1#
 #
    result <- 0#
    #
    for( i in 2:(nScenarios+1)) {#
    	result <- result + inputData[fIndex,i]#
    } #
 	result#
}#
#
totalFeatureDiffusionOverStep <- function(inputData) {#
	nFeatures <- length(inputData[[1]])#
	fds <- c(1:nFeatures)#
#
	for(i in 1:nFeatures) {#
		featureName <- inputData[i, 1]#
		fds[i] <- featureDiffusionOverStep (inputData, featureName)#
	}   #
	fds#
}#
#
featureDiffusionOverScenario <- function(inputData, feature) {#
	fIndex <- featureIndex(inputData, feature)#
      nScenarios <- length(inputData)-1#
 #
      result <- 0#
      for( i in 2:(nScenarios+1)) {#
          if( inputData[fIndex,i] > 0) result <- result + 1#
      } #
 #
      result#
}#
#
totalFeatureDiffusionOverScenario <- function(inputData) {#
	nFeatures <- length(inputData[[1]])#
	fds <- c(1:nFeatures)#
#
	for(i in 1:nFeatures) {#
		featureName <- inputData[i, 1]#
		fds[i] <- featureDiffusionOverScenario (inputData, featureName)#
	}   #
	fds#
}#
#
numberOfFeaturesPerScenario <- function(inputData, scenario) {#
 	dist <- inputData[scenario]#
	 result <- 0#
	 for (i in 1:length(dist[[1]])) {#
    		if( dist[i,1] > 0) result <- result + 1#
	 }#
	 result#
} #
#
totalNumberOfFeaturesPerScenarios <- function(inputData) {#
	numberOfScenarios <- length(inputData)-1#
	nameOfScenarios <- names(inputData)#
	nfs <- c(1:(numberOfScenarios))#
	#
	for( i in 2:(numberOfScenarios+1) ) {#
		scenarioName <- nameOfScenarios[i]#
		nfs[i-1] <- numberOfFeaturesPerScenario(inputData, scenarioName)		#
	} 	#
	nfs#
}#
#
#
stepsRelatedToFeature <- function(inputData, feature) {#
	nScenarios <- length(inputData)#
	fIndex <- featureIndex(inputData, feature)#
#
	# total number of steps related to a feature#
	stepsRelatedToFeature <- 0 #
	for( j in 2:(nScenarios) ) {#
		stepsRelatedToFeature <- stepsRelatedToFeature + inputData[fIndex, j]	#
	}#
#
	stepsRelatedToFeature#
}#
#
dedication <- function(inputData, feature, scenario) {#
	stepsOnScenario <- sum(inputData[scenario])#
	fIndex <- featureIndex(inputData, feature)#
	stepsOnScenarioRelatedToFeature <- inputData[scenario][fIndex,1]#
	#
	(stepsOnScenarioRelatedToFeature / stepsOnScenario)#
}#
#
concentration <- function(inputData, feature, scenario) {#
	nFeatures <- length(inputData[[1]])#
	nScenarios <- length(inputData)#
	fIndex <- featureIndex(inputData, feature)#
	#
	stepsRelatedToFeature <- stepsRelatedToFeature(inputData, feature) #
#
	stepsOnScenario <- inputData[scenario][fIndex,1]#
	result <- stepsOnScenario / stepsRelatedToFeature#
}#
#
degreeOfScattering <- function(inputData, feature) {#
	nScenarios <- length(inputData) - 1#
	fIndex <- featureIndex(inputData, feature)	#
	#
	# total number of steps related to a feature#
	nSteps <- stepsRelatedToFeature(inputData, feature)#
	#
	##
	sum <- 0.000#
	for ( k in 1:(nScenarios) ) {#
		c <- (inputData[fIndex, (k+1)] / nSteps)#
		sum <- sum + sqr (c - (1/nScenarios))#
	}#
	1 - ((nScenarios * sum) / (nScenarios-1))	#
}#
#
totalDegreeOfScattering <- function(inputData) {#
	nFeatures <- length(inputData[[1]])#
	dos <- c(1:nFeatures)#
#
	for(i in 1:nFeatures) {#
		featureName <- inputData[i, 1]#
		dos[i] <- degreeOfScattering(inputData, featureName)#
	}   #
	dos#
}#
#
degreeOfFoccus <- function(inputData, scenario)  {#
	s <- length(inputData[[1]])#
	stepsOfScenario <- sum(inputData[scenario])#
	#
	sum <- 0#
	#
	for( i in 1:s ) {#
		dedication <- ( inputData[scenario][i,1] / stepsOfScenario )#
		sum <- sum + sqr(dedication - 1/s)		#
	}#
	s * sum / (s-1)#
}#
#
avarageDegreeOfFocus <- function(inputData) {#
	numberOfScenarios <- length(inputData)#
	nameOfScenarios <- names(inputData)#
	sum <- 0#
	#
	for( i in 2:numberOfScenarios ) {#
		scenarioName <- nameOfScenarios[i]#
		sum <- sum + degreeOfFoccus(inputData, scenarioName)		#
	} 	#
	(sum / numberOfScenarios)#
}#
#
totalDegreeOfFocus <- function(inputData) {#
	numberOfScenarios <- length(inputData)-1#
	nameOfScenarios <- names(inputData)#
	dof <- c(1:(numberOfScenarios))#
	#
	for( i in 2:(numberOfScenarios+1) ) {#
		scenarioName <- nameOfScenarios[i]#
		dof[i-1] <- degreeOfFoccus(inputData, scenarioName)		#
	} 	#
	dof#
}
dosPLUSS <- totalDegreeOfScattering(smartPLUSS)
dosCC <- totalDegreeOfScattering(smartCC)
boxplot(dosPLUSS,dosCC, names = c("PLUSS","MSVCM"))
title("Boxplot DoS (Smart Home)")
histo(dosPLUSS)
hist(dosPLUSS, main="")
hist(dosPLUSS, main="Histogram of DoS (PPL)", xlab="DoS PLUSS")
hist(dosPLUSS, main="Histogram of DoS (Smart Home)", xlab="DoS PLUSS")
hist(dosPLUSS, main="Histogram of DoS (Smart Home)", xlab="DoS MSVCM")
hist(dosCC, main="Histogram of DoS (Smart Home)", xlab="DoS MSVCM")
dofPLUSS <- totalDegreeOfFocus(smartPLUSS)
dofCC <- totalDegreeOfFocus(smartCC)
boxplot(dofPLUSS,do)
boxplot(dofPLUSS,dofCC, names = c("PLUSS","MSVCM"))
title("Boxplot DoF (Smart Home)")
hist()
hist(dofCC, main="Histogram of DoF (Smart Home)", xlab="DoF PLUSS")
hist(dofPLUSS, main="Histogram of DoF (Smart Home)", xlab="DoF PLUSS")
hist(dofCC, main="Histogram of DoF (Smart Home)", xlab="DoF CC")
mmsPLUSS <- read.table("Documents/workspace/VariabilityManagement/docs/casestudies/mms/data/mms-pluss-data-tabular.txt",header=T)
mmsCC <- read.table("Documents/workspace/VariabilityManagement/docs/casestudies/mms/data/mms-cc-data-tabular.txt",header=T)
dofPLUSS <- totalDegreeOfFocus(mmsPLUSS)
dofCC <- totalDegreeOfFocus(mmsCC)
dosPLUSS <- totalDegreeOfScattering(mmsPLUSS)
dosCC <- totalDegreeOfScattering(mmsCC)
hist(dofCC, main="Histogram of DoF (MMS)", xlab="DoF CC")
hist(dofPLUSS, main="Histogram of DoF (MMS)", xlab="DoF MSVCM")
hist(dofCC, main="Histogram of DoF (MMS)", xlab="DoF MSVCM")
mmsCC
hist(dofCC, main="Histogram of DoF (MMS)", xlab="DoF MSVCM")
hist(dosCC, main="Histogram of DoS (MMS)", xlab="DoS MSVCM")
hist(dofPLUSS, main="Histogram of DoF (MMS)", xlab="DoF PLUSS")
hist(dosPLUSS, main="Histogram of DoS (MMS)", xlab="DoS PLUSS")
hist(dofCC, main="Histogram of DoF (Smart Home)", xlab="DoF MSVCM")
dofCC <- totalDegreeOfFocus(smartCC)
hist(dofCC, main="Histogram of DoF (Smart Home)", xlab="DoF MSVCM")
hist(dofCC, dofPLUSS, main="Histogram of DoF (Smart Home)", xlab="DoF MSVCM")
pplPLUSS <- read.table("Documents/workspace/VariabilityManagement/docs/casestudies/ppl/data/ppl-pluss-tabular-data.txt", header=T)
pplCC <- read.table("Documents/workspace/VariabilityManagement/docs/casestudies/ppl/data/ppl-cc-tabular-data.txt", header=T)
sqr <- function (x) {#
  x*x#
}#
#
sigma2 <- function(v) {#
 sum <- 0#
 for (i in 1:length(v)) {#
  sum <- sum + sqr ( (v[i] - mean(v)) )#
 }#
 sum / (length (v) -1)#
}#
#
sigma <- function (v) {#
 sqrt (sigma2 (v))#
}#
#
pnormal <- function (n,s,y0)#
 (y0-n)/s#
 #
#
featureIndex <- function(inputData, feature) {#
	nFeatures <- length(inputData[[1]])#
	fIndex <- 0#
	for( i in 1:nFeatures ) {#
		if( inputData[i,1] == feature ) fIndex <- i#
	}#
	fIndex#
}#
#
featureDiffusionOverStep <- function(inputData, feature) {#
	fIndex <- featureIndex(inputData, feature)#
    nScenarios <- length(inputData)-1#
 #
    result <- 0#
    #
    for( i in 2:(nScenarios+1)) {#
    	result <- result + inputData[fIndex,i]#
    } #
 	result#
}#
#
totalFeatureDiffusionOverStep <- function(inputData) {#
	nFeatures <- length(inputData[[1]])#
	fds <- c(1:nFeatures)#
#
	for(i in 1:nFeatures) {#
		featureName <- inputData[i, 1]#
		fds[i] <- featureDiffusionOverStep (inputData, featureName)#
	}   #
	fds#
}#
#
featureDiffusionOverScenario <- function(inputData, feature) {#
	fIndex <- featureIndex(inputData, feature)#
      nScenarios <- length(inputData)-1#
 #
      result <- 0#
      for( i in 2:(nScenarios+1)) {#
          if( inputData[fIndex,i] > 0) result <- result + 1#
      } #
 #
      result#
}#
#
totalFeatureDiffusionOverScenario <- function(inputData) {#
	nFeatures <- length(inputData[[1]])#
	fds <- c(1:nFeatures)#
#
	for(i in 1:nFeatures) {#
		featureName <- inputData[i, 1]#
		fds[i] <- featureDiffusionOverScenario (inputData, featureName)#
	}   #
	fds#
}#
#
numberOfFeaturesPerScenario <- function(inputData, scenario) {#
 	dist <- inputData[scenario]#
	 result <- 0#
	 for (i in 1:length(dist[[1]])) {#
    		if( dist[i,1] > 0) result <- result + 1#
	 }#
	 result#
} #
#
totalNumberOfFeaturesPerScenarios <- function(inputData) {#
	numberOfScenarios <- length(inputData)-1#
	nameOfScenarios <- names(inputData)#
	nfs <- c(1:(numberOfScenarios))#
	#
	for( i in 2:(numberOfScenarios+1) ) {#
		scenarioName <- nameOfScenarios[i]#
		nfs[i-1] <- numberOfFeaturesPerScenario(inputData, scenarioName)		#
	} 	#
	nfs#
}#
#
#
stepsRelatedToFeature <- function(inputData, feature) {#
	nScenarios <- length(inputData)#
	fIndex <- featureIndex(inputData, feature)#
#
	# total number of steps related to a feature#
	stepsRelatedToFeature <- 0 #
	for( j in 2:(nScenarios) ) {#
		stepsRelatedToFeature <- stepsRelatedToFeature + inputData[fIndex, j]	#
	}#
#
	stepsRelatedToFeature#
}#
#
dedication <- function(inputData, feature, scenario) {#
	stepsOnScenario <- sum(inputData[scenario])#
	fIndex <- featureIndex(inputData, feature)#
	stepsOnScenarioRelatedToFeature <- inputData[scenario][fIndex,1]#
	#
	(stepsOnScenarioRelatedToFeature / stepsOnScenario)#
}#
#
concentration <- function(inputData, feature, scenario) {#
	nFeatures <- length(inputData[[1]])#
	nScenarios <- length(inputData)#
	fIndex <- featureIndex(inputData, feature)#
	#
	stepsRelatedToFeature <- stepsRelatedToFeature(inputData, feature) #
#
	stepsOnScenario <- inputData[scenario][fIndex,1]#
	result <- stepsOnScenario / stepsRelatedToFeature#
}#
#
degreeOfScattering <- function(inputData, feature) {#
	nScenarios <- length(inputData) - 1#
	fIndex <- featureIndex(inputData, feature)	#
	#
	# total number of steps related to a feature#
	nSteps <- stepsRelatedToFeature(inputData, feature)#
	#
	##
	sum <- 0.000#
	for ( k in 1:(nScenarios) ) {#
		c <- (inputData[fIndex, (k+1)] / nSteps)#
		sum <- sum + sqr (c - (1/nScenarios))#
	}#
	1 - ((nScenarios * sum) / (nScenarios-1))	#
}#
#
totalDegreeOfScattering <- function(inputData) {#
	nFeatures <- length(inputData[[1]])#
	dos <- c(1:nFeatures)#
#
	for(i in 1:nFeatures) {#
		featureName <- inputData[i, 1]#
		dos[i] <- degreeOfScattering(inputData, featureName)#
	}   #
	dos#
}#
#
degreeOfFoccus <- function(inputData, scenario)  {#
	s <- length(inputData[[1]])#
	stepsOfScenario <- sum(inputData[scenario])#
	#
	sum <- 0#
	#
	for( i in 1:s ) {#
		dedication <- ( inputData[scenario][i,1] / stepsOfScenario )#
		sum <- sum + sqr(dedication - 1/s)		#
	}#
	s * sum / (s-1)#
}#
#
avarageDegreeOfFocus <- function(inputData) {#
	numberOfScenarios <- length(inputData)#
	nameOfScenarios <- names(inputData)#
	sum <- 0#
	#
	for( i in 2:numberOfScenarios ) {#
		scenarioName <- nameOfScenarios[i]#
		sum <- sum + degreeOfFoccus(inputData, scenarioName)		#
	} 	#
	(sum / numberOfScenarios)#
}#
#
totalDegreeOfFocus <- function(inputData) {#
	numberOfScenarios <- length(inputData)-1#
	nameOfScenarios <- names(inputData)#
	dof <- c(1:(numberOfScenarios))#
	#
	for( i in 2:(numberOfScenarios+1) ) {#
		scenarioName <- nameOfScenarios[i]#
		dof[i-1] <- degreeOfFoccus(inputData, scenarioName)		#
	} 	#
	dof#
}
dosPLUSS <- totalDegreeOfScattering(pplPLUSS)
dosCC <- totalDegreeOfScattering(pplCC)
dofPLUSS <- totalDegreeOfFocus(pplPLUSS)
dofCC <- totalDegreeOfFocus(pplCC)
boxplot(do)
boxplot(dofPLUSS,dofCC, names = c("PLUSS","MSVCM"))
title("Boxplot DoF (Pedagogical Product Line)")
boxplot(dosPLUSS,dosCC, names = c("PLUSS","MSVCM"))
title("Boxplot DoS (Pedagogical Product Line)")
hist(dofCC, dofPLUSS, main="Histogram of DoF (Smart Home)", xlab="DoF MSVCM")
hist(dofCC, main="Histogram of DoF (PPL)", xlab="DoF MSVCM")
hist(dofPLUSS, main="Histogram of DoF (PPL)", xlab="DoF PLUSS")
hist(dosPLUSS, main="Histogram of DoS (PPL)", xlab="DoS PLUSS")
hist(dosCC, main="Histogram of DoS (PPL)", xlab="DoS MSVCM")
data <- read.table("Documents/workspace/splc-rba/data/bench.data", header=T)
data
attach(data)
plot (TypeErro~NF)
lines(TypeErro~NF)
data <- read.table("Documents/workspace/splc-rba/data/bench.data", header=T)
data
lines(TypeErro~NF)
plot (TypeErro~NF)
lines(TypeErro~NF)
plot (SAT~NF)
lines(TypeErro~NF)
plot (BadSmell~NF)
exp1.dat = read.table(file="Documents/workspace/VariabilityManagement/docs/casestudies/controlled-experiment/data/fase01-tabular.data",header=TRUE)
attach(exp1.dat)#
Replicacao = factor(Replicacao)#
Aluno = factor(Aluno)#
Dominio = factor(Dominio)#
Tecnica = factor(Tecnica)
exp1.aov <- aov(Resposta~Replicacao+Aluno:Replicacao+Dominio+Tecnica)#
exp1.lm <- lm(Resposta~Replicacao+Aluno:Replicacao+Dominio+Tecnica)
library(MASS)#
boxcox(exp1.aov,lambda = seq(-3, 5, 1/10))#
exp12.aov<-aov(Resposta^(-1)~Replicacao+Aluno:Replicacao+Dominio+Tecnica)#
exp12.lm<-lm(Resposta^(-1)~Replicacao+Aluno:Replicacao+Dominio+Tecnica)
plot(predict(exp1.aov),residuals(exp1.aov),xlab="estimated values", ylab="residuals",axes=F)#
axis(1, at = c(50,60, 70, 80, 90, 100), pos=0)#
axis(2, at = c(-30,-25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40))
qqnorm(residuals(exp1.aov), xlab="", ylab="")
qqline(residuals(exp1.aov), xlab="", ylab="")
qqnorm(residuals(exp12.aov), xlab="", ylab="" )
qqline(residuals(exp12.aov), xlab="", ylab="")
qqnorm(residuals(exp12.aov), xlab="", ylab="" )
qqline(residuals(exp12.aov), xlab="", ylab="")
ncv.test(exp1.lm)
ncv.test(exp12.lm)
exp2.dat = read.table(file="Documents/workspace/VariabilityManagement/docs/casestudies/controlled-experiment/data/fase02-tabular.data",header=TRUE)#
attach(exp2.dat)#
Replica= factor(Replica)#
Student = factor(Student)#
ChangeSet = factor(ChangeSet)#
Technique = factor(Technique)#
#
exp2.aov <- aov(TotalTime~Replica+Student:Replica+ChangeSet+Technique)#
exp2.lm <- lm (TotalTime~Replica+Student:Replica+ChangeSet+Technique)
ncv.test(exp2.lm)
exp22.aov <- aov(TotalTime^(0.4)~Replica+Student:Replica+ChangeSet+Technique)
exp22.lm <- lm(TotalTime^(0.4)~Replica+Student:Replica+ChangeSet+Technique)
ncv.test(exp22.lm)
TukeyNADD.QL.REP<-function(objeto1)#
{#
y1<-NULL#
y2<-NULL#
y1<- fitted(objeto1)#
y2<- y1^2#
objeto2<- aov(y2 ~ objeto1[13]$model[,2] +#
objeto1[13]$model[,3]:objeto1[13]$model[,2]#
+ objeto1[13]$model[,4]+ objeto1[13]$model[,5])#
ynew <- resid(objeto1)#
xnew <- resid(objeto2)#
objeto3 <- lm(ynew ~ xnew)#
M <- anova(objeto3)#
MSN <- M[1,3]#
MSErr <- M[2,2]/(objeto1[8]$df.residual-1)#
F0 <- MSN/MSErr#
p.val <- 1 - pf(F0, 1,objeto1[8]$df.residual-1)#
p.val#
}
TukeyNADD.QL.REP(exp1.aov)
TukeyNADD.QL.REP(exp12.aov)
TukeyNADD.QL.REP(exp2.aov)
qqnorm(residuals(exp2.aov), xlab="", ylab="" )
qqline(residuals(exp2.aov), xlab="", ylab="")
exp2.dat = read.table(file="Documents/workspace/VariabilityManagement/docs/casestudies/controlled-experiment/data/fase02-tabular.data",header=TRUE)#
attach(exp2.dat)#
Replica= factor(Replica)#
Student = factor(Student)#
ChangeSet = factor(ChangeSet)#
Technique = factor(Technique)
exp2.aov <- aov(TotalTime~Replica+Student:Replica+ChangeSet+Technique)#
exp2.lm <- lm (TotalTime~Replica+Student:Replica+ChangeSet+Technique)
exp22.aov <- aov(TotalTime^(0.4)~Replica+Student:Replica+ChangeSet+Technique)
exp22.lm <- lm(TotalTime^(0.4)~Replica+Student:Replica+ChangeSet+Technique)
ncv.test(exp1.lm)
ncv.test(exp2.lm)
TukeyNADD.QL.REP<-function(objeto1)#
{#
y1<-NULL#
y2<-NULL#
y1<- fitted(objeto1)#
y2<- y1^2#
objeto2<- aov(y2 ~ objeto1[13]$model[,2] +#
objeto1[13]$model[,3]:objeto1[13]$model[,2]#
+ objeto1[13]$model[,4]+ objeto1[13]$model[,5])#
ynew <- resid(objeto1)#
xnew <- resid(objeto2)#
objeto3 <- lm(ynew ~ xnew)#
M <- anova(objeto3)#
MSN <- M[1,3]#
MSErr <- M[2,2]/(objeto1[8]$df.residual-1)#
F0 <- MSN/MSErr#
p.val <- 1 - pf(F0, 1,objeto1[8]$df.residual-1)#
p.val#
}
TukeyNADD.QL.REP(exp2.lm)
exp1.dat = read.table(file="Documents/workspace/VariabilityManagement/docs/casestudies/controlled-experiment/data/fase01-so-tabular.data",header=TRUE)
attach(exp1.dat)#
Replicacao = factor(Replicacao)#
Aluno = factor(Aluno)#
Dominio = factor(Dominio)#
Tecnica = factor(Tecnica)
exp1.aov <- aov(Resposta~Replicacao+Aluno:Replicacao+Dominio+Tecnica)#
exp1.lm <- lm(Resposta~Replicacao+Aluno:Replicacao+Dominio+Tecnica)
ncv.test(exp1.lm)
TukeyNADD.QL.REP<-function(objeto1)#
{#
y1<-NULL#
y2<-NULL#
y1<- fitted(objeto1)#
y2<- y1^2#
objeto2<- aov(y2 ~ objeto1[13]$model[,2] +#
objeto1[13]$model[,3]:objeto1[13]$model[,2]#
+ objeto1[13]$model[,4]+ objeto1[13]$model[,5])#
ynew <- resid(objeto1)#
xnew <- resid(objeto2)#
objeto3 <- lm(ynew ~ xnew)#
M <- anova(objeto3)#
MSN <- M[1,3]#
MSErr <- M[2,2]/(objeto1[8]$df.residual-1)#
F0 <- MSN/MSErr#
p.val <- 1 - pf(F0, 1,objeto1[8]$df.residual-1)#
p.val#
}
TukeyNADD.QL.REP(exp1.aov)
library(MASS)#
boxcox(exp1.aov,lambda = seq(-3, 5, 1/10))
exp12.aov<-aov(Resposta^(-1)~Replicacao+Aluno:Replicacao+Dominio+Tecnica)#
exp12.lm<-lm(Resposta^(-1)~Replicacao+Aluno:Replicacao+Dominio+Tecnica)
TukeyNADD.QL.REP(exp12.aov)
ncv.test(exp12.lm)
qqnorm(residuals(exp1.aov), xlab="", ylab="")
qqlines(residuals(exp1.aov), xlab="", ylab="")
qqline(residuals(exp1.aov), xlab="", ylab="")
qqnorm(residuals(exp12.aov), xlab="", ylab="")
qqline(residuals(exp12.aov), xlab="", ylab="")
plot(Resposta~Tecnica)
library(lattice)
bowplot(Resposta~Tecnica)
bwplot(Resposta~Tecnica)
bwplot(Resposta~Tecnica, data=alldat)
plot(Resposta~Tecnica)
plot(mean(Tecnica))
plot(mean(Resposta~Tecnica))
TukeyHSD.aov(exp1.aov)
\
aov(exp1.aov)
summary.aov(exp1.aov)
exp1.dat = read.table(file="Documents/workspace/VariabilityManagement/docs/casestudies/controlled-experiment/data/fase01-so-media-tabular.data",header=TRUE)
ttach(exp1.dat)#
Replicacao = factor(Replicacao)#
Aluno = factor(Aluno)#
Dominio = factor(Dominio)#
Tecnica = factor(Tecnica)#
#
exp1.aov <- aov(Resposta~Replicacao+Aluno:Replicacao+Dominio+Tecnica)#
exp1.lm <- lm(Resposta~Replicacao+Aluno:Replicacao+Dominio+Tecnica)
 attach(exp1.dat)
Replicacao = factor(Replicacao)#
Aluno = factor(Aluno)#
Dominio = factor(Dominio)#
Tecnica = factor(Tecnica)
exp1.aov <- aov(Resposta~Replicacao+Aluno:Replicacao+Dominio+Tecnica)#
exp1.lm <- lm(Resposta~Replicacao+Aluno:Replicacao+Dominio+Tecnica)
library(MASS)#
boxcox(exp1.aov,lambda = seq(-3, 5, 1/10))
exp12.aov<-aov(Resposta^(-1)~Replicacao+Aluno:Replicacao+Dominio+Tecnica)#
exp12.lm<-lm(Resposta^(-1)~Replicacao+Aluno:Replicacao+Dominio+Tecnica)
ncv.test(exp1.lm)
ncv.test(exp12.lm)
TukeyNADD.QL.REP<-function(objeto1)#
{#
y1<-NULL#
y2<-NULL#
y1<- fitted(objeto1)#
y2<- y1^2#
objeto2<- aov(y2 ~ objeto1[13]$model[,2] +#
objeto1[13]$model[,3]:objeto1[13]$model[,2]#
+ objeto1[13]$model[,4]+ objeto1[13]$model[,5])#
ynew <- resid(objeto1)#
xnew <- resid(objeto2)#
objeto3 <- lm(ynew ~ xnew)#
M <- anova(objeto3)#
MSN <- M[1,3]#
MSErr <- M[2,2]/(objeto1[8]$df.residual-1)#
F0 <- MSN/MSErr#
p.val <- 1 - pf(F0, 1,objeto1[8]$df.residual-1)#
p.val#
}
TukeyNADD.QL.REP(exp12.aov)
qqnorm(residuals(exp1.aov), xlab="", ylab="")
qqlines(residuals(exp1.aov), xlab="", ylab="")
qqline(residuals(exp1.aov), xlab="", ylab="")
box
plo(Resposta~Tecnica)
plot(Resposta~Tecnica)
summary(exp12.aov)
TukeyHSD.aov(exp1.aov)
exp1.dat = read.table(file="Documents/workspace/VariabilityManagement/docs/casestudies/controlled-experiment/data/fase01-tabular.data",header=TRUE)#
attach(exp1.dat)#
Replicacao = factor(Replicacao)#
Aluno = factor(Aluno)#
Dominio = factor(Dominio)#
Tecnica = factor(Tecnica)#
#
exp1.aov <- aov(Resposta~Replicacao+Aluno:Replicacao+Dominio+Tecnica)#
exp1.lm <- lm(Resposta~Replicacao+Aluno:Replicacao+Dominio+Tecnica)
exp1.dat = read.table(file="Documents/workspace/VariabilityManagement/docs/casestudies/controlled-experiment/data/fase01-tabular.data",header=TRUE)
attach(exp1.dat)
Replication = factor(Replicacao)
Student = factor(Student)
SPL = factor(SPL)
Technique = factor(Technique)
plot (TotalTime~Technique)
exp1.dat = read.table(file="Documents/workspace/VariabilityManagement/docs/casestudies/controlled-experiment/data/fase01-tabular.data",header=TRUE)
plot (TotalTime~Technique)
exp1.dat = read.table(file="Documents/workspace/VariabilityManagement/docs/casestudies/controlled-experiment/data/fase01-tabular.data",header=TRUE)
attach(exp1.dat)
exp1.dat = read.table(file="Documents/workspace/VariabilityManagement/docs/casestudies/controlled-experiment/data/fase01-tabular.data",header=TRUE)
attach(exp1.dat)
Replication = factor(Replicacao)
Student = factor(Student)
SPL = factor(SPL)
Technique = factor(Technique)
plot (TotalTime~Technique)
plot (TotalTime~Technique+SPL)
plot (TotalTime~SPL+Technique)
exp1.dat = read.table(file="Documents/workspace/VariabilityManagement/docs/casestudies/controlled-experiment/data/fase01-so-media-tabular.data",header=TRUE)#
attach(exp1.dat)#
Rep = factor(Rep)#
Student = factor(Student)#
SPL = factor(SPL)#
Technique = factor(Technique)
plot (TotalTime~Technique)
exp1.dat = read.table(file="Documents/workspace/VariabilityManagement/docs/casestudies/controlled-experiment/data/fase01-so-media-tabular.data",header=TRUE)#
attach(exp1.dat)#
Rep = factor(Rep)#
Student = factor(Student)#
SPL = factor(SPL)#
Technique = factor(Technique)
plot (TotalTime~Technique)
exp1.aov <- aov(TotalTime~Rep+Student:Rep+SPL+Technique)
exp1.aov
summary ()exp1.aov)
summary (exp1.aov)
exp1.dat = read.table(file="Documents/workspace/VariabilityManagement/docs/casestudies/controlled-experiment/data/fase01-so-media-tabular.data",header=TRUE)#
attach(exp1.dat)#
Rep = factor(Rep)#
Student = factor(Student)#
SPL = factor(SPL)#
Technique = factor(Technique)
exp1.aov <- aov(TotalTime~Rep+Student:Rep+SPL+Technique)
summary (exp1.aov)
exp2.aov <- aov(TotalTime~Technique)
summary(exp2)
summary(exp2.aov)
exp1.dat = read.table(file="Documents/workspace/VariabilityManagement/docs/casestudies/controlled-experiment/data/fase01-so-media-tabular.data",header=TRUE)#
attach(exp1.dat)#
Rep = factor(Rep)#
Student = factor(Student)#
SPL = factor(SPL)#
Technique = factor(Technique)
exp1.aov <- aov(TotalTime~Rep+Student:Rep+SPL+Technique)
summary(exp2.aov)
summary(exp1.aov)
exp1.dat = read.table(file="Documents/workspace/VariabilityManagement/docs/casestudies/controlled-experiment/data/fase01-so-media-tabular.data",header=TRUE)#
attach(exp1.dat)#
Rep = factor(Rep)#
Student = factor(Student)#
SPL = factor(SPL)#
Technique = factor(Technique)
exp1.aov <- aov(TotalTime~Rep+Student:Rep+SPL+Technique)
xtable(exp1.aov)
xtable(summary(exp1.aov))
boxplot (TotalTime~Technique)
summary(TotalTime~Technique)
sumamry(Technique)
summary(Technique)
exp2.aov <- aov(TotalTime~Technique)
summary(exp2.aov)
exp2.aov
c1 <- Technique:PLUSS
c1 <- Technique("PLUSS")
c1 <- Technique:"PLUSS"
exp1.dat = read.table(file="Documents/workspace/VariabilityManagement/docs/casestudies/controlled-experiment/data/fase01-so-media-tabular.data",header=TRUE)#
attach(exp1.dat)#
Rep = factor(Rep)#
Student = factor(Student)#
SPL = factor(SPL)#
Technique = factor(Technique)
exp1.aov <- aov(TotalTime~Rep+Student:Rep+SPL+Technique)
plot(TotalTime~Technique)
TukeyHSD(exp1.aov)
TukeyHSD(exp1.aov,which=Technique)
xtable(TukeyHSD(exp1.aov,which=Technique))
exp2.dat = read.table(file="Documents/workspace/VariabilityManagement/docs/casestudies/controlled-experiment/data/fase02-tabular.data",header=TRUE)#
attach(exp2.dat)#
Replica= factor(Replic)#
Student = factor(Student)#
ChangeSet = factor(ChangeSet)#
Technique = factor(Technique)
plot(TotalTime~Technique)
exp2.dat = read.table(file="Documents/workspace/VariabilityManagement/docs/casestudies/controlled-experiment/data/fase02-so-tabular.data",header=TRUE)#
attach(exp2.dat)#
Replica= factor(Replic)#
Student = factor(Student)#
ChangeSet = factor(ChangeSet)#
Technique = factor(Technique)
plot(TotalTime~Technique)
exp1.aov <- aov(TotalTime~Rep+Student:Rep+SPL+Technique)
exp1.aov <- aov(TotalTime~Replic+Student:Rep+SPL+Technique)
exp1.aov <- aov(TotalTime~Replic+Student:Replic+SPL+Technique)
exp1.aov <- aov(TotalTime~Replic+Student:Replic+CR+Technique)
exp1.aov <- aov(TotalTime~Replic+Student:Replic+ChangeSet+Technique)
exp2.aov <- aov(TotalTime~Replica+Student:Replica+ChangeSet+Technique)
xtable(TukeyHSD(exp2.aov,which=Technique))
xtable(summary(exp1.aov))
(summary(exp1.aov))
xtable(summary(exp1.aov))
TukeyHSD(exp2.aov,which=Technique)
TukeyHSD(exp2.aov)
dof <- read.table("dof-summary.data",header=T)
> attach(dof)#
> #
> #
> library(lattice)#
> #
> #
> #
> #
> bwplot(DoF~Technique | SPL)
attach(dof)
library(lattice)
bwplot(DoF~Technique | SPL)
