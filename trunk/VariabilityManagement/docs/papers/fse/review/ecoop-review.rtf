{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf440
{\fonttbl\f0\fswiss\fcharset77 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs24 \cf0 Reviewer 1 asks about relationships with earlier papers that relate aspect-oriented techniques to software product line (SPL). Actually, referred works focus on implementing variation points using aspect-oriented programming. In our approach, we are formally proposing a crosscutting approach for variability management (VM), which weaves SPL artifacts (like feature models, configuration knowledge, and product configurations) and common software artifacts (in the paper, use case scenarios). Therefore, the main difference of our work  is that we have formally defined variability management as an extended view of crosscutting concern, which means that, besides being guided by SPL artifacts,  it is not only applied for composing source code artifacts. As a consequence, there is no overlapping between our approach and aforementioned works.\
\
Reviewer 3 asks about "why" we have formally defined our composition process. The answer is that we've chosen to keep our view of crosscutting closed to Masuhara/Kiczales thought, which formally describes the semantics of crosscutting techniques using the Scheme programming language. Aiming at increase the legibility of the formal descriptions, they were written in Haskell programming language. \
\
Finally, the third reviewer about our empirical or practical experience with our approach. Actually, we have only applied the proposed technique to three product lines: eShop and pedagogical product lines (both proposed by the Software Engineering Institute) and a real multimedia message product line. This third case was accepted at Early Aspects'08.   \
\
\
\
}