LCompilationUnitP. CompilationUnit ::= "package" [Ident] [Semi] [Import] [TypeDecl] ;
LCompilationUnit.  CompilationUnit ::= [Import] [TypeDecl] ;

LSemi1.	Semi ::=  ";" ;

LImport.  Import  ::= "import" [Ident] [Semi] ; 
LImportA. Import ::= "import" [Ident] ".*" [Semi] ;
separator Import "" ;


LDecl. TypeDecl ::= ClassHeader "{" [MemberDeclaration] "}" ;
separator  TypeDecl "";

LClassDecl.         ClassHeader ::= [Modifier] "class" Ident ; 
LClassDeclEx.       ClassHeader ::= [Modifier] "class" Ident "extends" [TypeName] ;
LClassDeclIm.       ClassHeader ::= [Modifier] "class" Ident "implements" [TypeName] ;
LClassDeclExIm.     ClassHeader ::= [Modifier] "class" Ident "extends" [TypeName] "implements" [TypeName] ; 
LInterfaceDecl.     ClassHeader ::= [Modifier] "interface" Ident ;
LInterfaceDeclEx.   ClassHeader ::= [Modifier] "interface" Ident "extends" [TypeName] ;
LInterfaceDeclIm.   ClassHeader ::= [Modifier] "interface" Ident "implements" [TypeName] ; 
LInterfaceDeclExIm. ClassHeader ::= [Modifier] "interface" Ident "extends" [TypeName] "implements" [TypeName] ; 

-- member declaration

LMethodDefinition.       MemberDeclaration ::= [Modifier] TypeName Ident "(" [Args] ")"  [Semi] ;
LMethodDefinitionT.      MemberDeclaration ::= [Modifier] TypeName Ident "(" [Args] ")" Throws [Semi] ;
LMethodDeclaration.      MemberDeclaration ::= [Modifier] TypeName Ident "(" [Args] ")" BlockStmt ;  
LMethodDeclarationT.     MemberDeclaration ::= [Modifier] TypeName Ident "(" [Args] ")" Throws BlockStmt ;  
LFieldDeclaration.       MemberDeclaration ::= [Modifier] VariableDeclaration [Semi] ;
LConstructorDeclaration. MemberDeclaration ::= [Modifier] Ident "(" [Args] ")" BlockStmt ;
LStaticBlock.            MemberDeclaration ::= "static" BlockStmt ; 

-- throws declaration

LThrows. Throws ::= "throws" [TypeName] ; 
 
-- variable declaration and initialization  

LVariableDeclaration.  VariableDeclaration ::= TypeName [VariableId] ;
LVariableDeclarationI. VariableDeclaration ::= TypeName [VariableId] "=" VariableInitializer ; 

LVariableId.  VariableId ::= Ident ;
LVariableIdV. VariableId ::= Ident "[" "]" ; 

LVariableInitializer.  VariableInitializer ::= Stmt ;
LVariableInitializerV. VariableInitializer ::= "{" [Stmt] "}" ; 
 
separator VariableId "," ;


-- statements

LBlockStmt.               BlockStmt ::= "{" [Stmt] "}" ;
LExpressionStmt.          Stmt      ::= Expression [Semi];  
LVariableDeclarationStmt. Stmt      ::= VariableDeclaration [Semi] ; 
LBlockStmtStmT.           Stmt      ::= BlockStmt ;
LConstantStmt.			  Stmt		::= Constant ;
separator Stmt "" ;

separator MemberDeclaration "";

-- expressions

-- the unary expressions ++ and --

LIncExpressionL. Expression ::= "++" Expression ;
LIncExpressionR. Expression ::= Expression "++" ;
LDecExpressionL. Expression ::= "--" Expression ; 
LDecExpressionR. Expression ::= Expression "--" ;

-- the binary expressions + - * / 

LAddExpression. Expression ::= Expression "+" Expression ;
LSubExpression. Expression ::= Expression "-" Expression ; 
LMulExpression. Expression ::= Expression "*" Expression ;
LDivExpression. Expression ::= Expression "/" Expression ;
LModExpression. Expression ::= Expression "%" Expression ; 

-- assignment expressions
LAssignmentExpression. Expression ::= Expression "=" Expression [Semi] ;

-- 
LIdentExpression. Expression ::= Ident ; 

-- constant expressions

LConstantExpression. Expression ::= Constant ;
LStringExpression.   Expression ::= String ;
-- args declaration
LArgs. Args ::= TypeName Ident ;

separator Args "," ; 


-- types

Tchar.        BasicType ::= "char";
Tshort.       BasicType ::= "short";
Tint.         BasicType ::= "int";
Tlong.        BasicType ::= "long";
Tfloat.       BasicType ::= "float";
Tdouble.      BasicType ::= "double";
Tbyte.        BasicType ::= "byte";
Tboolean.     BasicType ::= "boolean";

ArrayType. 	  TypeSpec ::= TypeName [BracketsOpt];
TypeName. 	  TypeSpec ::= TypeName;

BuiltIn.	  TypeName ::= BasicType;
ClassType.        TypeName ::= [Ident];

separator nonempty TypeName ",";

BracketsOpt.   BracketsOpt ::= "[]";

separator nonempty BracketsOpt "";

-- modifiers

Mabstract.	  Modifier ::= "abstract";
Mfinal.		  Modifier ::= "final";
Mpublic.	  Modifier ::= "public";
Mprotected.	  Modifier ::= "protected";
Mprivate.	  Modifier ::= "private";
Mtransient.	  Modifier ::= "transient";
Mvolatile.	  Modifier ::= "volatile";
Mnative.	  Modifier ::= "native";
Msync.		  Modifier ::= "synchronized";
Mstatic.	  Modifier ::= "static";
terminator Modifier "";


terminator nonempty Semi "";
separator nonempty Ident ".";

-- tokens. used to define constants.

token Unsigned ["123456789"] digit * ('u'|'U');

token Long ["123456789"] digit * ('l'|'L');

token UnsignedLong ["123456789"] digit * (('u''l')|('U''L'));

token Hexadecimal '0' ('x'|'X') (digit | ["abcdef"] | ["ABCDEF"])+;

token HexUnsigned '0' ('x'|'X') (digit | ["abcdef"] | ["ABCDEF"])+ ('u'|'U');

token HexLong '0' ('x'|'X') (digit | ["abcdef"] | ["ABCDEF"])+ ('l'|'L');

token HexUnsLong '0' ('x'|'X') (digit | ["abcdef"] | ["ABCDEF"])+ (('u''l')|('U''L'));

token Octal '0'["01234567"]*;

token OctalUnsigned '0'["01234567"]*('u'|'U');

token OctalLong '0'["01234567"]* ('l'|'L');

token OctalUnsLong '0'["01234567"]* (('u''l')|('U''L'));

token JDouble (((digit+ '.')|('.' digit+))(('e'|'E') ('-')? digit+)?)|
              (digit+ ('e'|'E') ('-')? digit+)|(digit+ '.' digit+ 'E' ('-')? digit+);

token JFloat (((digit+ '.' digit+)|(digit+ '.')|('.' digit+))(('e'|'E')('-')? digit+)?
                               ('f'|'F'))|((digit+ ('e'|'E')('-')? digit+)('f'|'F'));

token JLongDouble (((digit+ '.' digit+)|(digit+ '.')|('.' digit+))(('e'|'E')('-')? 
                   digit+)?('l'|'L'))|((digit+ ('e'|'E')('-')? digit+)('l'|'L'));

token UnicodeChar '\'' '\\' 'u' (digit | ["abcdef"] | ["ABCDEF"]) (digit | ["abcdef"] | ["ABCDEF"]) (digit | ["abcdef"] | ["ABCDEF"]) (digit | ["abcdef"] | ["ABCDEF"]) '\'';

token JChar '\'' ((char - ["'\\"]) | ('\\' ["'\\ntr"])) '\'';

Efloat.        Constant ::= Double;
Echar.         Constant ::= JChar;
Eunicode.      Constant ::= UnicodeChar;
Eunsigned.     Constant ::= Unsigned;
Elong.         Constant ::= Long;
Eunsignlong.   Constant ::= UnsignedLong;
Ehexadec.      Constant ::= Hexadecimal;
Ehexaunsign.   Constant ::= HexUnsigned;
Ehexalong.     Constant ::= HexLong;
Ehexaunslong.  Constant ::= HexUnsLong;
Eoctal.        Constant ::= Octal;
Eoctalunsign.  Constant ::= OctalUnsigned;
Eoctallong.    Constant ::= OctalLong;
Eoctalunslong. Constant ::= OctalUnsLong;
Ecdouble.      Constant ::= JDouble;
Ecfloat.       Constant ::= JFloat;
Eclongdouble.  Constant ::= JLongDouble;
Eint.          Constant ::= Integer;  
Etrue.	       Constant ::= "true";
Efalse.	       Constant ::= "false";

internal Elonger. Constant ::= Integer;
internal Edouble. Constant ::= Double;


 
