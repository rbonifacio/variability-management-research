data01 <- read.table("Documents/workspace/VariabilityManagement/docs/casestudies/controlled-experiment/data/fase01-versao2.data",header=TRUE)
data01
attach(data01)
Replicacao <- factor(Replicacao)
Aluno <- factor(Aluno)
Dominio <- factor(Dominio)
Tecnica <- factor(Tecnica)
data01AOV <- aov(Resposta~Replicacao + Replicacao:Aluno + Dominio + Tecnica)
data01AOV
summary(data01AOV)
summary(Tecnica)
summary(Tecnica, Resposta)
plot(Tecnica, Respota)
plot(Respota)
plot(Resposta)
plot(Tecnica, Resposta)
summary(Tecnica, Resposta)
summary(Resposta)
data01
temp <- aov(Resposta ~ Tecnica)
temp
summary(temp)
plot(temp)
temp
data <- read.table("Documents/workspace/VariabilityManagement/docs/casestudies/controlled-experiment/data/fase01.data", header=TRUE)
data
attach(data)
Replicacao <- factor(Replicacao)
Aluno <- factor(Aluno)
SPL <- factor(SPL)
Tecnica <- factor(Tecnica)
dataAOV <- aov(Tempo~Replicacao + Replicacao:Aluno + SPL + Tecnica)
summary(dataAOV)
Tecnica("SVCM")
Tecnica
sum(Tecnica)
dataAOV2 <- aov(Tempo~Tecnica)
boxplot(dataAOV2)
plot(dataAOV2)
plot(Tecnica)
plot(Tecnica, Tempo)
plot(SPL, Tempo)
data <- read.table("Documents/workspace/VariabilityManagement/docs/casestudies/controlled-experiment/data/fase02-versao2.data", header=TRUE)
data
attach(data)
Replica <- factor(Replica)
Student <- factor(Student)
ChangeSet <- factor(ChangeSet)
Technique <- factor(Technique)
dataTotalTime <- aov(TotalTime~Replica + Replica:Student + ChangeSet + Technique)
summary(dataTotalTime)
boxplot(Technique, TotalTime)
plot(Techinique, TotalTime)
plot(Technique, TotalTime)
dataOpenClose <- aov(AddedScenarios/(AddedScenarios+ChangedScenarios)~Replica + Replica:Student + ChangeSet + Technique)
summary(dataOpenClose)
openClose <- AddedScenario / (AddedScenarios + ChangedScenarios)
openClose <- AddedScenarios / (AddedScenarios + ChangedScenarios)
openClose
dataOpenClose <- aov(openClose~Replica + Replica:Student + ChangeSet + Technique)
summary(dataOopenClose)
summary(dataOpenClose)
plot(Technique, openClose)
sqr <- function (x) {#
  x*x#
}#
#
sigma2 <- function(v) {#
 sum <- 0#
 for (i in 1:length(v)) {#
  sum <- sum + sqr ( (v[i] - mean(v)) )#
 }#
 sum / (length (v) -1)#
}#
#
sigma <- function (v) {#
 sqrt (sigma2 (v))#
}#
#
pnormal <- function (n,s,y0)#
 (y0-n)/s#
 #
#
featureIndex <- function(inputData, feature) {#
	nFeatures <- length(inputData[[1]])#
	fIndex <- 0#
	for( i in 1:nFeatures ) {#
		if( inputData[i,1] == feature ) fIndex <- i#
	}#
	fIndex#
}#
#
featureDiffusionOverStep <- function(inputData, feature) {#
	fIndex <- featureIndex(inputData, feature)#
    nScenarios <- length(inputData)-1#
 #
    result <- 0#
    #
    for( i in 2:(nScenarios+1)) {#
    	result <- result + inputData[fIndex,i]#
    } #
 	result#
}#
#
totalFeatureDiffusionOverStep <- function(inputData) {#
	nFeatures <- length(inputData[[1]])#
	fds <- c(1:nFeatures)#
#
	for(i in 1:nFeatures) {#
		featureName <- inputData[i, 1]#
		fds[i] <- featureDiffusionOverStep (inputData, featureName)#
	}   #
	fds#
}#
#
featureDiffusionOverScenario <- function(inputData, feature) {#
	fIndex <- featureIndex(inputData, feature)#
      nScenarios <- length(inputData)-1#
 #
      result <- 0#
      for( i in 2:(nScenarios+1)) {#
          if( inputData[fIndex,i] > 0) result <- result + 1#
      } #
 #
      result#
}#
#
totalFeatureDiffusionOverScenario <- function(inputData) {#
	nFeatures <- length(inputData[[1]])#
	fds <- c(1:nFeatures)#
#
	for(i in 1:nFeatures) {#
		featureName <- inputData[i, 1]#
		fds[i] <- featureDiffusionOverScenario (inputData, featureName)#
	}   #
	fds#
}#
#
numberOfFeaturesPerScenario <- function(inputData, scenario) {#
 	dist <- inputData[scenario]#
	 result <- 0#
	 for (i in 1:length(dist[[1]])) {#
    		if( dist[i,1] > 0) result <- result + 1#
	 }#
	 result#
} #
#
totalNumberOfFeaturesPerScenarios <- function(inputData) {#
	numberOfScenarios <- length(inputData)-1#
	nameOfScenarios <- names(inputData)#
	nfs <- c(1:(numberOfScenarios))#
	#
	for( i in 2:(numberOfScenarios+1) ) {#
		scenarioName <- nameOfScenarios[i]#
		nfs[i-1] <- numberOfFeaturesPerScenario(inputData, scenarioName)		#
	} 	#
	nfs#
}#
#
#
stepsRelatedToFeature <- function(inputData, feature) {#
	nScenarios <- length(inputData)#
	fIndex <- featureIndex(inputData, feature)#
#
	# total number of steps related to a feature#
	stepsRelatedToFeature <- 0 #
	for( j in 2:(nScenarios) ) {#
		stepsRelatedToFeature <- stepsRelatedToFeature + inputData[fIndex, j]	#
	}#
#
	stepsRelatedToFeature#
}#
#
dedication <- function(inputData, feature, scenario) {#
	stepsOnScenario <- sum(inputData[scenario])#
	fIndex <- featureIndex(inputData, feature)#
	stepsOnScenarioRelatedToFeature <- inputData[scenario][fIndex,1]#
	#
	(stepsOnScenarioRelatedToFeature / stepsOnScenario)#
}#
#
concentration <- function(inputData, feature, scenario) {#
	nFeatures <- length(inputData[[1]])#
	nScenarios <- length(inputData)#
	fIndex <- featureIndex(inputData, feature)#
	#
	stepsRelatedToFeature <- stepsRelatedToFeature(inputData, feature) #
#
	stepsOnScenario <- inputData[scenario][fIndex,1]#
	result <- stepsOnScenario / stepsRelatedToFeature#
}#
#
degreeOfScattering <- function(inputData, feature) {#
	nScenarios <- length(inputData) - 1#
	fIndex <- featureIndex(inputData, feature)	#
	#
	# total number of steps related to a feature#
	nSteps <- stepsRelatedToFeature(inputData, feature)#
	#
	##
	sum <- 0.000#
	for ( k in 1:(nScenarios) ) {#
		c <- (inputData[fIndex, (k+1)] / nSteps)#
		sum <- sum + sqr (c - (1/nScenarios))#
	}#
	1 - ((nScenarios * sum) / (nScenarios-1))	#
}#
#
totalDegreeOfScattering <- function(inputData) {#
	nFeatures <- length(inputData[[1]])#
	dos <- c(1:nFeatures)#
#
	for(i in 1:nFeatures) {#
		featureName <- inputData[i, 1]#
		dos[i] <- degreeOfScattering(inputData, featureName)#
	}   #
	dos#
}#
#
degreeOfFoccus <- function(inputData, scenario)  {#
	s <- length(inputData[[1]])#
	stepsOfScenario <- sum(inputData[scenario])#
	#
	sum <- 0#
	#
	for( i in 1:s ) {#
		dedication <- ( inputData[scenario][i,1] / stepsOfScenario )#
		sum <- sum + sqr(dedication - 1/s)		#
	}#
	s * sum / (s-1)#
}#
#
avarageDegreeOfFocus <- function(inputData) {#
	numberOfScenarios <- length(inputData)#
	nameOfScenarios <- names(inputData)#
	sum <- 0#
	#
	for( i in 2:numberOfScenarios ) {#
		scenarioName <- nameOfScenarios[i]#
		sum <- sum + degreeOfFoccus(inputData, scenarioName)		#
	} 	#
	(sum / numberOfScenarios)#
}#
#
totalDegreeOfFocus <- function(inputData) {#
	numberOfScenarios <- length(inputData)-1#
	nameOfScenarios <- names(inputData)#
	dof <- c(1:(numberOfScenarios))#
	#
	for( i in 2:(numberOfScenarios+1) ) {#
		scenarioName <- nameOfScenarios[i]#
		dof[i-1] <- degreeOfFoccus(inputData, scenarioName)		#
	} 	#
	dof#
}
cyberPLUSS <- read.table("cyber-chair-pluss-tabular.data",header=TRUE)
cyberSVCM <- read.table("cyber-chair-svcm-tabular.data",header=TRUE)
totalDegreeOfScattering(cyberPLUSS)
cyberPLUSS <- read.table("cyber-chair-pluss-tabular.data",header=TRUE)
cyberSVCM <- read.table("cyber-chair-svcm-tabular.data",header=TRUE)
totalDegreeOfScattering(cyberPLUSS)
totalDegreeOfFocus(cyberPLUSS)
totalDegreeOfScattering(cyberSVCM)
totalDegreeOfScattering(cyberPLUSS)
boxplot(totalDegreeOfFocus(PLUSS),totalDegreeOfScattering(SVCM))
boxplot(totalDegreeOfFocus(cyberPLUSS),totalDegreeOfScattering(cyberSVCM))
boxplot(totalDegreeOfFocus(cyberPLUSS),totalDegreeOfFocus(cyberSVCM))
boxplot(totalDegreeOfScattering((cyberPLUSS),totalDegreeOfScattering((cyberSVCM))
boxplot(totalDegreeOfScattering(cyberPLUSS),totalDegreeOfScattering(cyberSVCM))
eshopSVCM <- read.table("eshop-svcm-tabular.data",header=TRUE)
eshopPLUSS <- read.table("eshop-pluss-tabular.data",header=TRUE)
boxplot(totalDegreeOfScattering(eshopPLUSS),totalDegreeOfScattering(eshopSVCM))
boxplot(totalDegreeOfFocus(eshopPLUSS),totalDegreeOfFocus(eshopSVCM))
boxplot(totalDegreeOfFocus(cyberPLUSS),totalDegreeOfFocus(cyberSVCM))
boxplot(totalDegreeOfScattering(cyberPLUSS),totalDegreeOfScattering(cyberSVCM))
boxplot(totalDegreeOfScattering(eshopPLUSS),totalDegreeOfScattering(eshopSVCM))
