Reviewer 1 asks about the relationship with earlier papers that use aspect-oriented techniques on a software product line (SPL) context. Actually, the works cited by the reviewer, and similar ones in the literature, focus on implementing variations using aspects. Contrasting, in the paper under review, we focus on composition techniques for use case scenarios, not code, and specially show and formalize the crosscutting nature of variability management (VM) as a whole, going beyond mechanisms for implementing variations; we do consider the specification of variations in use cases (which is not novel), but our main contribution is to identify and formalize the crosscutting effects of feature models, configuration knowledge, and product configurations. This has not been shown, nor formalized, before. In fact, there is no overlapping between our approach and the aforementioned works, including previous work from the same authors.

Reviewer 3 asks about "why" we have formally defined our composition process. The answer is that we've chosen to keep our view of crosscutting close to Masuhara/Kiczales formalization of crosscutting a three part part description (Modeling Crosscutting in Aspect Oriented Mechanisms, ECOOP'03), which formally describes the semantics of crosscutting techniques using the Scheme programming language. Aiming at increasing the legibility of the formal descriptions, we opted for the Haskell programming language. 

Finally, the third reviewer asks about our empirical or practical experience with our approach. Actually, we have only applied the proposed technique to three product lines: eShop and pedagogical product lines (both proposed by the Software Engineering Institute) and a real multimedia message product line. 

