{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf480
{\fonttbl\f0\fswiss\fcharset77 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww19000\viewh11920\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\f0\fs32 \cf0 We thank the reviewers for their comments.\
\
[Composition process and feature interaction]\
The paper aims to (a) propose an extended notion of *crosscutting* for variability management--- considering the contribution of  variability artifacts to  the product generation;  and (b) present a framework for modeling variability management as crosscutting mechanisms. We have just applied both contributions to the domain of scenario variability. As a consequence, proposing new composition techniques for scenario variability *is not* the main goal of the paper. For this reason, we have not described in the paper all kinds of compositions that we have already implemented in our approach (such as loop compositions).  Additionally, due to space constraints, we have omitted details (such as how we deal with the feature interaction problem) that are not relevant to the particular purpose of this paper. \
\
[Feature expression written in propositional logic]\
The use of propositional logic is a widespread technique for managing dependencies between features. These dependencies might arise either in the problem domain (expressed as features constraints) or in the configuration space (represented in our approach by the configuration knowledge). Even commercial tools (such as Pure Variants and Gears) use propositional logic to deal with features dependencies. In the configuration space, the use of propositional logic is necessary mainly because certain features change the configuration of another ones. \
\
[Homogeneous x heterogeneous crosscutting]\
The discussion about "homogeneous x heterogeneous crosscutting" is present in many works in the field (see references [15] and [19]). In our context, we say that an optional feature "A" has a "homogeneous crosscutting effect" if its behavior does not depend on the extension points. On the other hand, if the related behavior of an optional feature "A" varies and depends on the variation points, we say that feature "A" presents a "heterogeneous effect" in the base scenarios. We have observed the effect of homogeneous and heterogeneous crosscutting in the reported cases studies. Our approach has increased the degree of scattering (DoS) of *some* base features in the Smart Home, where the optional features present heterogeneous behavior. Other studies, whose optional features are mainly homogeneous, result in a better modularization (decreasing of DoS). \
\
\
[PLUC approach]\
Differently from PLUSS, PLUC proposes independent sections for variability management. However, in PLUC, all information related to the SPL scope and configuration is represented in the use case model. Based on PLUC, the inclusion of a new product, for instance, requires a deep review of different use cases. For this reason, PLUC presents the lowest level of separation of concerns between variability management and use case specifications. In a previous work, we report on these issues (Early Aspects@AOSD, 2008). This is the main reason that motivated us for not spending much time in the PLUC evaluation. \
\
[Tool supporting]\
The composition processes have been implemented in Haskell. The current version of our environment parses feature models and use case documents generated from existing tools (Feature Modeling Plugin and Microsoft Word, respectively). We are now developing a Graphical User Interface to integrate all of the available features.  \
\
\
}