module FeatureModel.Parsers.FMGrammar.AbsFMGrammar where

-- Haskell module generated by the BNF converter

newtype Ident = Ident String deriving (Eq,Ord,Show)
data FMGrammar =
   FMGrammar [Production] [Expression]
  deriving (Eq,Ord,Show)

data Production =
   BaseProduction Ident [Child]
 | XorProduction Ident [Option]
 | OrProduction Ident [Option]
  deriving (Eq,Ord,Show)

data Child =
   MandatoryChild Ident
 | OptionalChild Ident
  deriving (Eq,Ord,Show)

data Option =
   Option Ident
  deriving (Eq,Ord,Show)

data Expression =
   BasicExp Ident
 | ImpliesExp Expression Expression
 | IffExp Expression Expression
 | AndExp Expression Expression
 | OrExp Expression Expression
 | NotExp Expression
  deriving (Eq,Ord,Show)

